#include <iostream>
using namespace std;
//sortowanie Bąbelkowe a liście-dokończyć
//napisać funkcję wstwainia do posortowanej liczby
// H->1;
// H->1->8;
// H->-6->1->8;
// H->-6->1->8->22;
// H->-6->-3->1->8->22;
struct node
{
	int val;
	node* next;
};
void ADD(node*& H, int x) {
	node* p = new node;
	p->val = x;
	p->next = H;
	H = p;
}

void SHOW(node* H) {
	cout << "H->";
	node* p = H;
	while (p != NULL) {

		cout << p->val << "->";
		p = p->next;

	}
	cout << "END";
	cout << endl;
}
//merge_sort
int LENGHT(node* H) {
	int i = 0;
	while (H != NULL) {
		H = H->next;
		i++;
	}
	return i;
}

void SPLIT(node*& H, node*& H1, node*& H2) {
	node* p = H;
	H1 = H;
	if (H != NULL && H->next == NULL) {
		H1 = H;
		H = NULL;
	}
	else
		for (int x = 0; x < (LENGHT(H) / 2) - 1; x++) {
			p = p->next;
		}

	H2 = p->next;
	p->next = NULL;
	H = NULL;
}

void MERGE(node*& H, node*& H1, node*& H2) {
	if (H1 == NULL && H2 != NULL) {
		H = H2;
		H2 = NULL;
	}
	if (H1 != NULL && H2 == NULL) {
		H = H1;
		H1 = NULL;
	}
	if (H1 != NULL && H2 != NULL) {
		node* T = NULL;
		node* p = NULL;
		while (H1 && H2) {
			if (H1->val < H2->val) {
				p = H1;
				H1 = H1->next;
				if (H == NULL) {
					H = p;
					T = p;
				}
				else {
					T->next = p;
					T = p;
				}
			}
			else {
				p = H2;
				H2 = H2->next;
				if (H == NULL) {
					H = p;
					T = p;
				}
				else {
					T->next = p;
					T = p;
				}
			}
		}
		if (H1 == NULL) {
			T->next = H2;
			H2 = NULL;
		}
		else {
			T->next = H1;
			H1 = NULL;
		}


	}
}

void MergeSort(node*& H) {
	if (H && H->next) {
		node* H1 = NULL;
		node* H2 = NULL;
		SPLIT(H, H1, H2);
		MergeSort(H1);
		MergeSort(H2);
		MERGE(H, H1, H2);
	}
}
//HeapSort
void Heapity(int* T,int heapsize,int i){
    int largest=i;
    int L=2*i;
    int R=L+1;
    if(L<=heapsize && T[L]>T[i]){
        largest=L;
    }
    if(R<=heapsize && T[R]>T[largest]){
        largest=R;
    }
    if(largest !=i){
        swap(T[i],T[largest]);
        Heapity(T,heapsize,largest);
    }
}
void BuildHeap(int* T,int heapsize){
    for(int i=heapsize/2;i>0;i--){
        Heapity(T,heapsize,i);
    }
}
void HeapSort(int* T,int size){
int heapsize=size;
BuildHeap(T,heapsize);
while(heapsize>1){
    swap(T[1],T[heapsize]);
    heapsize--;
    Heapity(T,heapsize,1);
}
}
//sortowanie Bąbelkowe a liście
void swap(node*&H){
    node* p=H;
    p->next = H;
	H = p;
}
void BubbleSort(node*& H){
    node* p=H;
    bool zamiana=false;
    if(H->val<H->next->val){
        swap(H);
        zamiana=true;
    }
}
int main()
{
	node* H = NULL;
	node* p = new node;
	ADD(H, 4);
	ADD(H, -8);
	ADD(H, 22);
	ADD(H, 5);
	ADD(H, 16);
	ADD(H, -6);
	ADD(H, 2);
	ADD(H, 3);
	ADD(H, 8);
	//SHOW(H);
	//cout << endl;
	//MergeSort(H);
	//SHOW(H);
	/*
    int* tablica= new int[10]{0,20,-10,6,-6,3,15,8,8,30};
    HeapSort(tablica,10);
    for(int i=1;i<10;i++){
        cout<<tablica[i]<<", ";
    }
    */
    
	return 0;
}
