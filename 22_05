#include <iostream>
using namespace std;
struct node
{
	int val;
	node* next;
};
void ADD(node*& H, int x) {
	node* p = new node;
	p->val = x;
	p->next = H;
	H = p;
}

void SHOW(node* H) {
	cout << "H->";
	node* p = H;
	while (p != NULL) {

		cout << p->val << "->";
		p = p->next;

	}
	cout << "END";
	cout << endl;
}
//merge_sort
int LENGHT(node* H) {
	int i = 0;
	while (H != NULL) {
		H = H->next;
		i++;
	}
	return i;
}

void SPLIT(node*& H, node*& H1, node*& H2) {
	node* p = H;
	H1 = H;
	if (H != NULL && H->next == NULL) {
		H1 = H;
		H = NULL;
	}
	else
		for (int x = 0; x < (LENGHT(H) / 2) - 1; x++) {
			p = p->next;
		}

	H2 = p->next;
	p->next = NULL;
	H = NULL;
}

void MERGE(node*& H, node*& H1, node*& H2) {
	if (H1 == NULL && H2 != NULL) {
		H = H2;
		H2 = NULL;
	}
	if (H1 != NULL && H2 == NULL) {
		H = H1;
		H1 = NULL;
	}
	if (H1 != NULL && H2 != NULL) {
		node* T = NULL;
		node* p = NULL;
		while (H1 && H2) {
			if (H1->val < H2->val) {
				p = H1;
				H1 = H1->next;
				if (H == NULL) {
					H = p;
					T = p;
				}
				else {
					T->next = p;
					T = p;
				}
			}
			else {
				p = H2;
				H2 = H2->next;
				if (H == NULL) {
					H = p;
					T = p;
				}
				else {
					T->next = p;
					T = p;
				}
			}
		}
		if (H1 == NULL) {
			T->next = H2;
			H2 = NULL;
		}
		else {
			T->next = H1;
			H1 = NULL;
		}


	}
}

void MergeSort(node*& H) {
	if (H && H->next) {
		node* H1 = NULL;
		node* H2 = NULL;
		SPLIT(H, H1, H2);
		MergeSort(H1);
		MergeSort(H2);
		MERGE(H, H1, H2);
	}
}
//HeapSort
void Heapity(int* T,int heapsize,int i){
    int largest=i;
    int L=2*i;
    int R=L+1;
    if(L<=heapsize && T[L]>T[i]){
        largest=L;
    }
    if(R<=heapsize && T[R]>T[i]){
        largest=R;
    }
    if(largest !=i){
        swap(T[i],T[largest])
        
    }
}

int main()
{
	node* H = NULL;
	node* p = new node;
	ADD(H, 4);
	ADD(H, -8);
	ADD(H, 22);
	ADD(H, 5);
	ADD(H, 16);
	ADD(H, -6);
	ADD(H, 2);
	ADD(H, 3);
	ADD(H, 8);
	SHOW(H);
	cout << endl;
	MergeSort(H);
	SHOW(H);
	return 0;
}
